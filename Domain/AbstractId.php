<?php
namespace common\domain;

use common\AssertionConcern;

/**
 *
 * This class is the base class for all domain value objects that represent entity 
 * database autogenerated identifiers
 *
 * @category   --
 * @package    --
 * @license    --
 * @version    1.0
 * @link       --
 * @since      Class available since Release 1.0
 */
abstract class AbstractId {
	/**
	 * The id
	 *
	 * @var mixed
	 * @access protected
	 */
	protected $id;
	
	final protected function __construct() {
		
	}
	
	/**
	 * Create new id value object
	 * 
	 * @param int|string $id The user id
	 *
	 * @return static
	 * @throws \DomainException
	 *
	 * @static
	 * @access public
	 * @since Method/function available since Release 1.0
	 */
	public static function create($id) {
		$self = new static();
		$self->setId($id);
		return $self;
	}
	
	/**
	 * Create a new, null id value object
	 *
	 * @return static
	 * @throws \DomainException
	 *
	 * @static
	 * @access public
	 * @since Method/function available since Release 1.0
	 */
	public static function createNull() {
		$self = new static();
		$self->id = NULL;
		return $self;
	}
	
	/**
	 * Check if this object equals another object
	 * 
	 * @param AbstractId $id
	 *
	 * @return boolean
	 * @throws --
	 *
	 * @access public
	 * @since Method/function available since Release 1.0
	 */
	public function equals(AbstractId $id) {
		$equalObjects = FALSE;
		
		if(static::class === get_class($id) && $this->id === $id->getId()) {
			$equalObjects = TRUE;
		}
		
		return $equalObjects;
	}
	
	/**
	 * Reconstitutes the value object. Should be used only by repositories when reconstituting
	 * an already persisted value object
	 * 
	 * @param int|string $id
	 * @return static
	 * @static
	 * @access public
	 */
	public static function reconstitute($id) {
		$self = new static();
		$self->id = $id;
		return $self;
	}
	
	/**
	 * Assert concern object that deals with arguments format type validations
	 *
	 * @return AssertionConcern
	 * @throws --
	 *
	 * @final
	 * @access protected
	 * @since Method/function available since Release 1.0
	 */
	protected final function assert() {
		return AssertionConcern::getInstance();
	}
	
	/**
	 * 
	 * @return int|string|null
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * @param int|string|null $id
	 */
	protected abstract function setId($id);
}

?>
